ratio_estimator <- sample_mean_y/sample_mean_x * population_mean_x
62/26
Y_A <- c(11, 4, 0, 2, 2, 3, 1, 1, 2)
Y_B <- c(9, 0, 1, 0, 2, 0, 1, 0, 0)
Y_C <- c(8, 2, 0, 1, 0, 0, 0, 0, 0)
numPub <-  c(0, 1, 2,3 4, 5, 6, 7 ,8)
numPub <-  c(0, 1, 2,3, 4, 5, 6, 7 ,8)
nb <- 13
nc <- 11
ybar_A <- Y_A / na
na <- 26
nb <- 13
nc <- 11
ybar_A <- Y_A / na
ybar_A <- sum(Y_A) / na
ybar_A <- sum(Y_A*numPub) / na
ybar_B <- sum(Y_B*numPub) / nb
ybar_C <- sum(Y_C*numPub) / nc
var_A <- var(Y_A)
var_A <- (sum(Y_A - ybar_A))^2 / (na-1)
var_A <- (sum(Y_A*numPub - ybar_A))^2 / (na-1)
var_A <- (sum(Y_A - ybar_A))^2 / (na-1)
var_A <- (sum((Y_A - ybar_A)^2)) / (na-1)
var_A <- (sum(Y_A - ybar_A)^2) / (na-1)
var_A <- (sum((Y_A - ybar_A)^2)) / (na-1)
Y_A <- c(6, 12, 7, 8)
Y_B <- c(7, 11, 10, 8)
Y_A <- c(6, 12, 7, 8)
Y_B <- c(7, 11, 10, 8)
Y_C <- c(10, 18, 10, 14)
Y_D <- c(10, 14, 11, 11)
ybar_A <- mean(Y_A)
ybar_B <- mean(Y_B)
ybar_C <- mean(Y_C)
ybar_D <- mean(Y_D)
ybar_grand <- mean(c(ybar_A, ybar_B, ybar_C, ybar_D))
ybar_treatment <- c(ybar_A, ybar_B, ybar_C, ybar_D)
ybar_row <- c(mean(c(10, 14, 7, 8)), mean(c(7, 18, 11, 8)), mean(c(6, 11, 10, 11)), mean(c(10, 12, 10, 14)))
ybar_col <- c(mean(c(10, 7, 6, 10)), mean(c(14, 18, 11, 12)), mean(c(7, 11, 10, 10)), mean(c(8, 8, 11, 14)))
SS_treatment <- p * sum((ybar_treatment - ybar_grand)^2)
SS_col <- p * sum((ybar_col - ybar_grand)^2)
p <- 4
SS_treatment <- p * sum((ybar_treatment - ybar_grand)^2)
SS_col <- p * sum((ybar_col - ybar_grand)^2)
SS_row <- p * sum((ybar_row - ybar_grand)^2)
SS_total <- sum(c(Y_A^2, Y_B^2, Y_C^2, Y_D^2)) - sum(c(Y_A, Y_B, Y_C, Y_D))^2 / p^2
SS_error <- SS_total - SS_row - SS_treatment - SS_col
df_row <- p-1
df_treatment <- p-1
df_col <- p-1
df_error <- (p-1)*(p-2)
MS_row <- SS_row / df_row
MS_col <- SS_col / df_col
MS_treatment <- SS_treatment / df_treatment
MS_error <- SS_error / df_error
Fobs <- MS_treatment / MS_error
Fobs
qf(0.05, p-1, (p-1)(p-2))
qf(0.05, 3, 6)
qf(0.05, p-1, (p-1)*(p-2))
b <- 3 # number of blocks
b <- 3 # number of blocks
Y_A <- c(83, 82, 88)
Y_B <- c(86, 90, 96)
Y_C <- c(85, 88, 95)
Y_D <- c(84, 82, 92)
ybar_A <- mean(Y_A)
ybar_B <- mean(Y_B)
ybar_C <- mean(Y_C)
ybar_D <- mean(Y_D)
ybar_t <- c(ybar_A, ybar_B, ybar_C, ybar_D) # Yi
ybar_b <- c(mean(c(83, 86, 85, 84)), mean(c(82, 90, 88, 82)), mean(c(88, 96, 95, 92)))# Yj
t <- length(ybar_t)
ybar_grand <- mean(ybar_t)
SS_treatment <- b*sum((ybar_t-ybar_grand)^2)
SS_total <- sum((c(Y_A, Y_B, Y_C, Y_D, Y_E) - ybar_grand)^2)
SS_error <- SS_total - SS_block - SS_treatment
SS_block <- t * sum((ybar_b - ybar_grand)^2)
df_treatment <- t - 1
df_block <- b-1
df_error <- (t-1)*(b-1)
df_total <- t*b - 1
MS_treatment <- SS_treatment / df_treatment
MS_block <- SS_block / df_block
MS_error <- SS_error / df_error
F_treatment <- MS_treatment / MS_error
F_block <- MS_block / MS_error
SS_total <- sum((c(Y_A, Y_B, Y_C, Y_D) - ybar_grand)^2)
SS_error <- SS_total - SS_block - SS_treatment
SS_block <- t * sum((ybar_b - ybar_grand)^2)
df_treatment <- t - 1
df_block <- b-1
df_error <- (t-1)*(b-1)
df_total <- t*b - 1
MS_treatment <- SS_treatment / df_treatment
MS_block <- SS_block / df_block
MS_error <- SS_error / df_error
F_treatment <- MS_treatment / MS_error
F_block <- MS_block / MS_error
ptreatment <- pf(F_treatment, df_treatment, df_error, lower.tail = FALSE)
ptreatment
pblock <- pf(F_block, df_block, df_error, lower.tail = FALSE)
pblock
F_treatment
qf(0.05, (t-1), (t-1)*(b-1))
100*116+300*147+400*134
p <- 4
Y_A <- c(6, 12, 7, 8)
Y_B <- c(7, 11, 10, 8)
Y_C <- c(10, 18, 10, 14)
Y_D <- c(10, 14, 11, 11)
ybar_A <- mean(Y_A)
ybar_B <- mean(Y_B)
ybar_C <- mean(Y_C)
ybar_D <- mean(Y_D)
ybar_grand <- mean(c(ybar_A, ybar_B, ybar_C, ybar_D))
10+7+6+10+14+18+11+12+7+11+10+10+16+11+14
167/16
28+15
43/4
ybar_row <- c(mean(c(10, 14, 7, 8)), mean(c(7, 18, 11, 8)), mean(c(6, 11, 10, 11)), mean(c(10, 12, 10, 14)))
24+15
39/4
ybar_col <- c(mean(c(10, 7, 6, 10)), mean(c(14, 18, 11, 12)), mean(c(7, 11, 10, 10)), mean(c(8, 8, 11, 14)))
ybar_treatment <- c(ybar_A, ybar_B, ybar_C, ybar_D)
ybar_treatment
33/4
SS_treatment <- p * sum((ybar_treatment - ybar_grand)^2)
SS_col <- p * sum((ybar_col - ybar_grand)^2)
SS_row <- p * sum((ybar_row - ybar_grand)^2)
SS_total <- sum(c(Y_A^2, Y_B^2, Y_C^2, Y_D^2)) - sum(c(Y_A, Y_B, Y_C, Y_D))^2 / p^2
SS_error <- SS_total - SS_row - SS_treatment - SS_col
df_row <- p-1
df_treatment <- p-1
df_col <- p-1
df_error <- (p-1)*(p-2)
MS_row <- SS_row / df_row
MS_col <- SS_col / df_col
MS_treatment <- SS_treatment / df_treatment
MS_error <- SS_error / df_error
Fobs <- MS_treatment / MS_error
19.3958333/0.979166667
qf(0.05, (p-1), (p-1)*(p-2))
b <- 3 # number of blocks
Y_A <- c(83, 82, 88)
Y_B <- c(86, 90, 96)
Y_C <- c(85, 88, 95)
Y_D <- c(84, 82, 92)
ybar_A <- mean(Y_A)
ybar_B <- mean(Y_B)
ybar_C <- mean(Y_C)
ybar_D <- mean(Y_D)
ybar_t <- c(ybar_A, ybar_B, ybar_C, ybar_D) # Yi
ybar_b <- c(mean(c(83, 86, 85, 84)), mean(c(82, 90, 88, 82)), mean(c(88, 96, 95, 92)))# Yj
88+96+95+92
371/4
ybar_grand <- mean(ybar_t)
mean(ybar_b)
ybar_grand <- mean(ybar_t)
SS_treatment <- b*sum((ybar_t-ybar_grand)^2)
SS_total <- sum((c(Y_A, Y_B, Y_C, Y_D) - ybar_grand)^2)
SS_error <- SS_total - SS_block - SS_treatment
SS_block <- t * sum((ybar_b - ybar_grand)^2)
SS_block <- t * sum((ybar_b - ybar_grand)^2)
SS_total <- sum((c(Y_A, Y_B, Y_C, Y_D) - ybar_grand)^2)
SS_error <- SS_total - SS_block - SS_treatment
SS_block <- t * sum((ybar_b - ybar_grand)^2)
SS_block <- t * sum((ybar_b - ybar_grand)^2)
t <- length(ybar_t)
SS_block <- t * sum((ybar_b - ybar_grand)^2)
SS_error <- SS_total - SS_block - SS_treatment
df_treatment <- t - 1
df_block <- b-1
df_error <- (t-1)*(b-1)
df_total <- t*b - 1
MS_treatment <- SS_treatment / df_treatment
MS_block <- SS_block / df_block
MS_error <- SS_error / df_error
F_treatment <- MS_treatment / MS_error
F_block <- MS_block / MS_error
76.917+162.167+17.833
qf(0.05, (t-1), (t-1)*(b-1))
ptreatment <- pf(F_treatment, df_treatment, df_error, lower.tail = FALSE)
N <- t*b
SS_error <- SS_total - SS_treatment
MS_error <- N - t
Fobs <- MS_treatment / (SS_error / MS_error)
pf(Fobs, t-1, N-t, lower.tail = FALSE)
Y_A <- c(83, 82, 88)
Y_B <- c(86, 90, 96)
Y_A <- c(83, 82, 88)
Y_B <- c(86, 90, 96)
Y_C <- c(85, 88, 95)
Y_D <- c(84, 82, 92)
n1 <- length(Y_A)
n2 <- length(Y_B)
n3 <- length(Y_C)
n4 <- length(Y_D)
N <- n1 + n2 + n3 + n4
ybar <- (sum(Y_A) + sum(Y_B) + sum(Y_C) + sum(Y_D)) / N # grand mean
Ybar_D <- mean(Y_D)
Ybar_A <- mean(Y_A)
Ybar_B <- mean(Y_B)
Ybar_C <- mean(Y_C)
Ybar_D <- mean(Y_D)
c(Ybar_A, Ybar_B, Ybar_C, Ybar_D)
85+88+95
268/3
56/3
var(Y_D)
4+16+36
56/2
c(var(Y_A), var(Y_B), var(Y_C), var(Y_D))
SS_treatment <- n1*(Ybar_A - ybar)^2 + n2*(Ybar_B - ybar)^2 + n3*(Ybar_C - ybar)^2 + n4*(Ybar_D - ybar)^2
SS_total <- sum((c(Y_A, Y_B, Y_C, Y_D) - ybar)^2)
SS_error <- SS_total - SS_treatment
791917/3
79.917/3
180/85
180/8
26.639/22.5
qf(0.05, 3, 8)
qf(0.05, t-1, N-t, lower.tail = FALSE) # F value
t <- 4 # number of treatments
qf(0.05, t-1, N-t, lower.tail = FALSE) # F value
pf(4.0661)
qf(0.05, 3, 6, lower.tail = FALSE)
N1 <- 100
N2 <- 300
N3 <- 400
n1 <- 20
n2 <- 20
n3 <- 30
ybar_1 <- 116
ybar_2 <- 147
ybar_3 <- 134
s2_1 <- 58
s2_2 <- 47
s2_3 <- 75
population_total <- sum(c(N1, N2, N3) * c(ybar_1, ybar_2, ybar_3))
116*100+147*300+134*400
100^2*(1/20-1/100)*58
300^2 * (1/20-1/300)*47
400^2 * (1/30-1/134)*75
310447.8+197400+23200
sqrt(531047.8)
sqrt(531047.8)/800
109300/800
1.96*0.911
136.925-1.78556
136.625-1.78556
136.625+1.78556
sqrt(58)
100 * sqrt(58)
100 * sqrt(58) * 2
200 * sqrt(58) + 600 * sqrt(47) + 400 * sqrt(75)
(200 * sqrt(58) + 600 * sqrt(47) + 400 * sqrt(75) / 2
200 * sqrt(58) + 600 * sqrt(47) + 400 * sqrt(75)
200 * sqrt(58) + 600 * sqrt(47) + 400 * sqrt(75)
9100.649/2
150*761.5773/4550.324
300*sqrt(47)/4550.324*150
200 * sqrt(58) + 600 * sqrt(47) + 800 * sqrt(75)
12564.75/2
150*761.5773/6282.375
300*sqrt(47)/6282.375*150
200 *sqrt(75)/4550.324
200 *sqrt(75)/4550.324 * 150
100* sqrt(58) * sqrt(2) + 300 * sqrt(47)*sqrt(2) +400*sqrt(75)
7449.742/sqrt(2)
150*100*sqrt(58) / 5267.763
300*sqrt(47)/5267.763
300*sqrt(47)/5267.763*150
150 * sqrt(75) * 400 / 7449.742
setwd("D:/Courses/2020/2020 Summer/STAT302/Project_1/Project_1C")
library("ggplot2")
library("stringr")
rawdata <- read.csv("Project1-csv.csv")
# histogram for quantitative explanatory variable - amount of exercise
hist(rawdata$Exercise, main = ("Histogram of amount of exercise (min)"),
xlab = "Minutes", ylab = "Frequency",
breaks = 10, xaxt = 'n', yaxt = 'n')
ggplot(q_relation, aes(x=exercise, y=sys_bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = 'red')+
geom_smooth(method = 'loess', formula = y ~ x, se= FALSE, color = 'blue')
# axis adjustment
axis(side = 1, at=seq(0,230,20), labels = seq(0,230,20), pos = 0)
axis(side = 2, at=seq(0,14,2), pos = 0)
# resonse ~ quantitative explanatory variable plot
# sys_bp - quantitative response variable
sys_bp <- as.character(rawdata$BP)
sys_bp <- str_remove_all(sys_bp, pattern = "/[0-9]*$")
sys_bp <- as.integer(sys_bp)
# amount of exercise - quantitative explanatory variable
ame <- rawdata$Exercise
q_relation <- data.frame(exercise = ame, bp = sys_bp)
ggplot(q_relation, aes(x=exercise, y=sys_bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = 'red')+
geom_smooth(method = 'loess', formula = y ~ x, se= FALSE, color = 'blue')
# Normal Q-Q plot
qq.plot = lm(q_relation$bp ~ q_relation$exercise, data = q_relation)
plot(qq.plot, which=2)
summary(datal.lm)
# fit a model and summarize
datal.lm <- lm(q_relation$bp ~ q_relation$exercise, data = q_relation)
summary(datal.lm)
ggplot(q_relation, aes(x=exercise, y=bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = TRUE, color = 'blue')+
geom_line(aes(y=PI$lwr), color='red', linetype='dashed')+
geom_line(aes(y=PI$upr), color='red', linetype='dashed')
# plot the final model, which is the original model
# get confidence interval
pr = predict(object = datal.lm, newdata = as.data.frame(q_relation$exercise), interval = 'confidence')
CI = cbind(as.data.frame(q_relation$exercise),pr )
PI = cbind(as.data.frame(q_relation$exercise), prd)
# get prediction confidence interval
prd = predict(object = datal.lm, newdata = as.data.frame(q_relation$exercise), interval = 'predict', level = 0.95)
PI = cbind(as.data.frame(q_relation$exercise), prd)
ggplot(q_relation, aes(x=exercise, y=bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = TRUE, color = 'blue')+
geom_line(aes(y=PI$lwr), color='red', linetype='dashed')+
geom_line(aes(y=PI$upr), color='red', linetype='dashed')
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 5, xaxt = 'n', yaxt = 'n')
# histogram for quantitative explanatory variable - amount of exercise
hist(rawdata$Exercise, main = ("Histogram of amount of exercise (min)"),
xlab = "Minutes", ylab = "Frequency",
breaks = 10, xaxt = 'n', yaxt = 'n')
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 5)
# histogram for quantitative explanatory variable - amount of exercise
hist(rawdata$Exercise, main = ("Histogram of amount of exercise (min)"),
xlab = "Minutes", ylab = "Frequency",
breaks = 10, xaxt = 'n', yaxt = 'n')
# axis adjustment
axis(side = 1, at=seq(0,230,20), labels = seq(0,230,20), pos = 0)
axis(side = 2, at=seq(0,14,2), pos = 0)
axis(side = 1)
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 5)
axis(side = 1)
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 10)
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 5)
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 5, xaxt = 'n')
axis(side = 1, at=seq(110, 170, 5))
axis(side = 1, at=seq(110, 170, 5), labels = seq(0, 1000, 10))
axis(side = 1, at=seq(110, 170, 5), labels = seq(110, 170, 5))
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 5, xaxt = 'n')
axis(side = 1, at=seq(110, 170, 5), labels = seq(110, 170, 5))
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 11, xaxt = 'n')
axis(side = 1, at=seq(110, 170, 5), labels = seq(110, 170, 5))
# distribution of categorical explanatory vairable
barplot(rawdata$Smoking)
# distribution of categorical explanatory vairable
counts <- table(smoke)
# distribution of categorical explanatory vairable
counts <- table(rawdata$Smoking)
counts
barplot(counts)
# distribution of categorical explanatory vairable
barplot(table(rawdata$Smoking), main = "Bar chart of the Frequency of Smokers",
xlab = "Smoking", ylab="Frequency")
# histogram for quantitative explanatory variable - amount of exercise
hist(rawdata$Exercise, main = ("Histogram of amount of exercise (min)"),
xlab = "Minutes", ylab = "Frequency",
breaks = 10, xaxt = 'n', yaxt = 'n')
# axis adjustment
axis(side = 1, at=seq(0,230,20), labels = seq(0,230,20), pos = 0)
axis(side = 2, at=seq(0,14,2), pos = 0)
# resonse ~ quantitative explanatory variable plot
# sys_bp - quantitative response variable
sys_bp <- as.character(rawdata$BP)
sys_bp <- str_remove_all(sys_bp, pattern = "/[0-9]*$")
sys_bp <- as.integer(sys_bp)
# amount of exercise - quantitative explanatory variable
ame <- rawdata$Exercise
q_relation <- data.frame(exercise = ame, bp = sys_bp)
ggplot(q_relation, aes(x=exercise, y=sys_bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = 'red')+
geom_smooth(method = 'loess', formula = y ~ x, se= FALSE, color = 'blue')
# fit a model and summarize
datal.lm <- lm(q_relation$bp ~ q_relation$exercise, data = q_relation)
summary(datal.lm)
# residual plots
q_relation$rstandard = rstandard(datal.lm)
q_relation$pred = predict(datal.lm)
ggplot(q_relation, aes(x=pred, y=rstandard)) +
xlim(min(q_relation$pred), max(q_relation$pred)) + ylim(-4, 3)+
xlab("Predicted Values") + ylab("Standardized Residuals") +
ggtitle("Residual Plot for exercise versus systolic blood pressure \n using Stadardized Residuals") +
geom_point(size = 1) +
geom_hline(yintercept = 0, color = 'red') +
geom_hline(yintercept = -2, color = 'blue', linetype = 'dashed') +
geom_hline(yintercept = 2, color = 'blue', linetype = 'dashed') +
geom_smooth(method = 'loess', formula = y ~ x, se = FALSE, color = 'blue')
# Normal Q-Q plot
qq.plot = lm(q_relation$bp ~ q_relation$exercise, data = q_relation)
plot(qq.plot, which=2)
# plot the final model, which is the original model
# get confidence interval
pr = predict(object = datal.lm, newdata = as.data.frame(q_relation$exercise), interval = 'confidence')
CI = cbind(as.data.frame(q_relation$exercise),pr )
ggplot(q_relation, aes(x=exercise, y=bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = TRUE, color = 'blue')+
geom_line(aes(y=PI$lwr), color='red', linetype='dashed')+
geom_line(aes(y=PI$upr), color='red', linetype='dashed')
library("ggplot2")
library("stringr")
setwd("D:/Courses/2021/2021 Spring/STAT 403/FinalProject")
library("ggplot2")
library("stringr")
rawdata <- read.csv("Yang Xiaoyang 301364025 Data.csv")
# histogram for the continuous response vairable - systolic blood pressure
hist(rawdata$BP, main = ("Histogram of Systolic blood pressure"),
xlab = "Systolic blood pressure (mmHg)", ylab = "Frequency",
breaks = 11, xaxt = 'n')
axis(side = 1, at=seq(110, 170, 5), labels = seq(110, 170, 5))
# distribution of categorical explanatory vairable
barplot(table(rawdata$Smoking), main = "Bar chart of the Frequency of Smokers",
xlab = "Smoking", ylab="Frequency")
# histogram for quantitative explanatory variable - amount of exercise
hist(rawdata$Exercise, main = ("Histogram of amount of exercise (min)"),
xlab = "Minutes", ylab = "Frequency",
breaks = 10, xaxt = 'n', yaxt = 'n')
# axis adjustment
axis(side = 1, at=seq(0,230,20), labels = seq(0,230,20), pos = 0)
axis(side = 2, at=seq(0,14,2), pos = 0)
# resonse ~ quantitative explanatory variable plot
# sys_bp - quantitative response variable
sys_bp <- as.character(rawdata$BP)
sys_bp <- str_remove_all(sys_bp, pattern = "/[0-9]*$")
sys_bp <- as.integer(sys_bp)
# amount of exercise - quantitative explanatory variable
ame <- rawdata$Exercise
q_relation <- data.frame(exercise = ame, bp = sys_bp)
ggplot(q_relation, aes(x=exercise, y=sys_bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = 'red')+
geom_smooth(method = 'loess', formula = y ~ x, se= FALSE, color = 'blue')
# fit a model and summarize
datal.lm <- lm(q_relation$bp ~ q_relation$exercise, data = q_relation)
summary(datal.lm)
# residual plots
q_relation$rstandard = rstandard(datal.lm)
q_relation$pred = predict(datal.lm)
ggplot(q_relation, aes(x=pred, y=rstandard)) +
xlim(min(q_relation$pred), max(q_relation$pred)) + ylim(-4, 3)+
xlab("Predicted Values") + ylab("Standardized Residuals") +
ggtitle("Residual Plot for exercise versus systolic blood pressure \n using Stadardized Residuals") +
geom_point(size = 1) +
geom_hline(yintercept = 0, color = 'red') +
geom_hline(yintercept = -2, color = 'blue', linetype = 'dashed') +
geom_hline(yintercept = 2, color = 'blue', linetype = 'dashed') +
geom_smooth(method = 'loess', formula = y ~ x, se = FALSE, color = 'blue')
# Normal Q-Q plot
qq.plot = lm(q_relation$bp ~ q_relation$exercise, data = q_relation)
plot(qq.plot, which=2)
# plot the final model, which is the original model
# get confidence interval
pr = predict(object = datal.lm, newdata = as.data.frame(q_relation$exercise), interval = 'confidence')
CI = cbind(as.data.frame(q_relation$exercise),pr )
# get prediction confidence interval
prd = predict(object = datal.lm, newdata = as.data.frame(q_relation$exercise), interval = 'predict', level = 0.95)
PI = cbind(as.data.frame(q_relation$exercise), prd)
ggplot(q_relation, aes(x=exercise, y=bp)) +
geom_point(size = 1) +
xlab("exercise (min)") + ylab("systolic blood pressure") +
ggtitle("Amount of exercise \n versus systolic blood") +
geom_smooth(method = lm, formula = y ~ x, se = TRUE, color = 'blue')+
geom_line(aes(y=PI$lwr), color='red', linetype='dashed')+
geom_line(aes(y=PI$upr), color='red', linetype='dashed')
